package com.example.Studentlibrarymanagement.Services;

import com.example.Studentlibrarymanagement.DTOs.StudentUpdateMobRequestDto;
import com.example.Studentlibrarymanagement.Enums.CardStatus;
import com.example.Studentlibrarymanagement.Models.Card;
import com.example.Studentlibrarymanagement.Models.Student;
import com.example.Studentlibrarymanagement.Repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class StudentService {

    @Autowired
    StudentRepository studentRepository;
    public String createStudent(Student student){

        //Student ,from the postman is already having the basic attribute set.


        //card should be autogenerated when createStudent function is called.
        Card card = new Card();
        card.setCardStatus(CardStatus.ACTIVATED);  //Card status is being set.
        card.setStudent(student); //Foreign key attribute
        //Filling the value of the unidirectional part.

        //lets go to the student
        student.setCard(card);

        //if there was a unidirectional mapping : we had to save both of them
        //studentRepo.save() and studentCard.save()
        //But we are super advanced and are using bidirectional mapping. In bidirectional mapping
        //child will automatically be saved.

        studentRepository.save(student);

        //By cascading effect,child will automatically be saved.

        return "Student and card added";
    }

    public String findByEmail(String email){
        Student student=studentRepository.findByEmail(email);
        return student.getName();
    }


//    public String updateMobNo(Student newStudent){
//        //first i will fetch the original data
//        Student originalStudent=studentRepository.findById(newStudent.getId()).get();
//
//        // i will keep other properties as it is: and i only change required parameters
//
//        originalStudent.setMobileNo(newStudent.getMobileNo());
//
//        //after updating i want to save
//        studentRepository.save(originalStudent);
//
//        return "Mobile number updated successfully";
//    }

    //using DTO method,
    public String updateMobNo(StudentUpdateMobRequestDto studentReq){

        //Convert the DTO To Entity : saved better


        //first i will fetch the original data
        Student originalStudent=studentRepository.findById(studentReq.getId()).get();

        // i will keep other properties as it is: and i only change required parameters

        originalStudent.setMobileNo(studentReq.getMobileNo());

        //after updating i need to save always
        studentRepository.save(originalStudent);

        return "Mobile number updated successfully";
    }


















//    public List<Student> findByCountry(String country){
//        return studentRepository.findByCountry(country);
//    }

}
